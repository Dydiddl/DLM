# DLM 프로젝트 - 파이썬 개발 커서룰

## 기본 원칙
- PEP 8 스타일 가이드를 엄격히 준수
- 가독성을 최우선으로 고려
- DRY (Don't Repeat Yourself) 원칙 적용
- KISS (Keep It Simple, Stupid) 원칙 적용

## 코드 스타일 규칙

### 들여쓰기
- 4칸 공백 사용 (탭 사용 금지)
- 일관된 들여쓰기 유지

### 줄 길이
- 최대 79자 제한
- 긴 줄은 적절히 분리하여 가독성 확보

### 공백 사용
- 연산자 주변 공백: `a + b` (O), `a+b` (X)
- 함수 호출 시 불필요한 공백 제거: `func(a, b)` (O), `func( a, b )` (X)

### 임포트 순서
1. 표준 라이브러리
2. 서드파티 라이브러리  
3. 로컬 애플리케이션/라이브러리
- 각 그룹 사이에 빈 줄 추가

## 네이밍 컨벤션

### 변수명
- 스네이크 케이스 사용: `user_name`, `total_count`
- 상수는 대문자: `MAX_RETRY_COUNT`, `DEFAULT_TIMEOUT`
- 불린 변수는 `is_`, `has_`, `can_` 접두사 사용: `is_valid`, `has_permission`

### 함수명
- 동사로 시작하는 스네이크 케이스: `get_user_info()`, `calculate_salary()`
- 불린 반환 함수는 `is_`, `has_`, `can_` 접두사: `is_valid_email()`

### 클래스명
- 파스칼 케이스 사용: `WorkerManager`, `DatabaseConnection`
- 명사로 시작하고 명확한 의미 전달

### 모듈명
- 소문자 스네이크 케이스: `worker_management.py`, `database_utils.py`

## 문서화 규칙

### Docstring 작성 (모든 함수/클래스에 필수)
```python
def function_name(param1: str, param2: int) -> bool:
    """
    함수의 목적을 명확히 설명.
    
    Args:
        param1 (str): 첫 번째 매개변수 설명
        param2 (int): 두 번째 매개변수 설명
    
    Returns:
        bool: 반환값 설명
    
    Raises:
        ValueError: 예외 발생 조건 설명
    
    Example:
        >>> function_name("test", 10)
        True
    """
```

### 타입 힌트
- 모든 함수 매개변수와 반환값에 타입 힌트 필수
- 복잡한 타입은 `typing` 모듈 사용

### 주석
- 복잡한 로직에만 주석 작성
- "무엇을" 하는지보다 "왜" 하는지 설명

## 에러 처리 규칙

### 예외 처리
- 구체적인 예외 타입 사용
- 사용자 정의 예외 클래스 생성
- 적절한 에러 메시지 제공

```python
class WorkerNotFoundError(Exception):
    """근로자를 찾을 수 없을 때 발생하는 예외"""
    pass

class InvalidDataError(Exception):
    """잘못된 데이터 형식일 때 발생하는 예외"""
    pass
```

### 컨텍스트 매니저 사용
- 파일, 데이터베이스 연결 등에 `with` 문 사용

## 성능 최적화 규칙

### 리스트 컴프리헨션 활용
```python
# 좋은 예
squares = [x**2 for x in range(10) if x % 2 == 0]

# 나쁜 예
squares = []
for x in range(10):
    if x % 2 == 0:
        squares.append(x**2)
```

### 제너레이터 사용
- 대용량 데이터 처리 시 제너레이터 활용
- 메모리 효율성 고려

## 보안 규칙

### 입력 검증
- 모든 사용자 입력에 대한 검증 필수
- 정규표현식 활용한 형식 검증
- SQL 인젝션, XSS 방지

### 민감 정보 처리
- 주민등록번호, 계좌번호 등 암호화 저장
- 환경변수 사용하여 설정 관리

## 테스트 규칙

### 단위 테스트
- 모든 함수/클래스에 단위 테스트 작성
- 테스트 커버리지 80% 이상 유지
- Mock 객체 활용하여 외부 의존성 격리

### 테스트 네이밍
- 테스트 함수명은 `test_` 접두사 사용
- 명확한 테스트 목적 표현: `test_add_worker_success()`, `test_validate_id_number_invalid_format()`

## 프로젝트 구조 규칙

### 디렉토리 구조
```
src/
├── models/          # 데이터 모델
├── services/        # 비즈니스 로직
├── utils/           # 유틸리티 함수
├── validators/      # 검증 로직
└── main.py          # 메인 실행 파일
```

### 파일 구성
- 각 모듈은 단일 책임 원칙 준수
- 관련 기능끼리 그룹화
- 순환 임포트 방지

## 일용근로자 관리 시스템 특화 규칙

### 데이터 모델
- `Worker` 클래스: 일용근로자 정보 관리
- `Team` 클래스: 소속팀 정보 관리
- `Document` 클래스: 문서(주민등록증, 통장사본) 관리

### 검증 규칙
- 주민등록번호 형식 및 체크섬 검증
- 휴대전화번호 형식 검증 (01X-XXXX-XXXX)
- 계좌번호 형식 검증 (은행별 다른 형식 지원)

### 파일 처리
- 스캔 파일 및 사진 업로드 지원
- 다양한 이미지 형식 처리 (JPG, PNG, PDF)
- 파일 크기 및 형식 검증

## 코드 생성 시 주의사항

1. **한국어 지원**: 모든 사용자 인터페이스와 메시지는 한국어로 작성
2. **로깅**: 적절한 로그 레벨 사용 (DEBUG, INFO, WARNING, ERROR)
3. **설정 관리**: 환경변수와 설정 파일 분리
4. **에러 메시지**: 사용자가 이해하기 쉬운 한국어 메시지 제공
5. **타입 안전성**: 타입 힌트를 통한 런타임 에러 방지

## 금지사항

- 하드코딩된 값 사용 (매직 넘버, 매직 스트링)
- 전역 변수 사용
- 과도한 중첩 (3단계 이상)
- 복잡한 한 줄 표현식
- 예외 무시 (`except: pass`)

이 규칙들을 엄격히 준수하여 일관성 있고 유지보수하기 쉬운 코드를 생성하세요. 